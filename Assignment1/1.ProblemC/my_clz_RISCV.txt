.data
data:       .word 0x0000002, 0x000000FF, 0xFFFFFFFF, 0x00000000
len:        .word 0x4
expect:     .word 30, 24, 0, 32
endl:       .string "\n"
undef:      .string "undefined"
correct:    .string " correct"
incorrect:  .string " incorrect"

# t0: data start address (input)
# t1: number of data
# t2: data start address (expect output)
# t3: hold the value in a0 during a syscall temporarily
# t4: count
# t5: i
# t6: (x & (1 << i))
# --- 
# a1: my_clz output
# a2: expect output
# s0: store the immediate value 32 to check if the result is undefined.
.text
    la  t0, data
    lw  t1, len 
    la  t2, expect

main:
    lw  a0, 0(t0)           # show input value
    li  a7, 1
    ecall
    jal ra, newline

    jal ra, my_clz          # call my_clz

    mv  a1, a0              # store output to a1

    li  s0, 32
    beq a1, s0, isundef     # check if the result is undefined

    li  a7, 1               # show output value
    ecall                   

    lw  a2, 0(t2)
    li  a7, 4               
    bne a1, a2, wrong
right:
    la  a0, correct
    j   goback
wrong:
    la  a0, incorrect
    j   goback
isundef:
    la  a0, undef
goback:
    ecall
    jal  ra, newline
    addi t0, t0, 4
    addi t1, t1,-1
    addi t2, t2, 4
    bne  t1, zero, main
    li   a7, 10
    ecall

my_clz: 
    li  t4 0
    li  t5 31
loop:
    li   t6, 1              # t6 = const 1
	sll  t6, t6, t5         # t6 = 1 << i
	and  t6, a0, t6         # t6 = (x & (1 << i))
	bnez t6, quit
	addi t4, t4, 1
	addi t5, t5, -1
	bge  t5, zero, loop
quit:
    mv  a0, t4
    ret

newline:                    # to print "\n"
    mv  t3, a0
    la  a0, endl
    li  a7, 4
    ecall
    mv  a0, t3
    ret
