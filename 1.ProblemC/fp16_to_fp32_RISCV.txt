.data
data:       .word 0x3C00, 0xCC10, 0x962C
len:        .word 0x3
expect:     .word 0x3F800000, 0xC1820000, 0xBAC58000
endl:       .string "\n"
correct:    .string " correct"
incorrect:  .string " incorrect"

.text
    la  t0, data
    lw  t1, len 
    la  t2, expect
main:
    lw  a0, 0(t0)           # Show input value
    li  a7, 1               #
    ecall                   #
    jal ra, newline         #
    jal ra, fp16_to_fp32          # Call my_clz
    mv  a1, a0              # 
    li  a7, 1               # Show output value
    ecall                   # 
    lw  a2, 0(t2)           # Check if the output matches the expected result
    li  a7, 4               # 
    bne a1, a2, wrong       # 
right:                      # If output == expected, print correct 
    la  a0, correct         # 
    j   goback              # 
wrong:                      # If output != expected, print incorrect 
    la  a0, incorrect       # 
goback:
    ecall
    jal  ra, newline
    addi t0, t0, 4
    addi t1, t1,-1
    addi t2, t2, 4
    bne  t1, zero, main
    li   a7, 10
    ecall

fp16_to_fp32:
    slli a0 a0 16
    li s11 0x80000000
    and s2 a0 s11
    li s11 0x7FFFFFFF
    and s3 a0 s11
    mv a0 s3

my_clz:                     # my_clz function
    li  t4 0
    li  t5 31
loop:
    li   t6, 1              # t6 =       1
    sll  t6, t6, t5         # t6 =      (1 << i)
    and  t6, a0, t6         # t6 = (x & (1 << i))
    bnez t6, quit           # if (x & (1U << i)) break;
    addi t4, t4, 1
    addi t5, t5, -1
    bge  t5, zero, loop 
quit:
    mv s1 t4

    li s11 5
    blt s11 s1 Sub_Five      # if (5 < renorm_shift)
    li s1 0
    j continue
Sub_Five:
    addi s1 s1 -5   # renorm_shift -= 5
continue:
    li s11 0x04000000
    add s4 s3 s11
    srli s4 s4 8
    li s11 0x7F800000
    and s4 s4 s11

    addi s5 s3 -1
    srli s5 s5 31

    sll s6 s3 s1
    srli s6 s6 3
    li s11 0x70
    sub s7 s11 s1
    slli s7 s7 23

    add s8 s6 s7
    or s8 s8 s4

    xori s5 s5 -1
    and s8 s8 s5
    or s8 s8 s2
    mv a0 s8
    ret

newline:                    # to print "\n"
    mv  t3, a0
    la  a0, endl
    li  a7, 4
    ecall
    mv  a0, t3
    ret